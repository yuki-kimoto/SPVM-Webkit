package TestCase::Lib::SPVM::Webkit::Client {
  use SPVM::Webkit::Client;
  use SPVM::Hash;
  use SPVM::IO::File;
  use SPVM::StringBuffer;
  use SPVM::Util (strtoi);

  sub test_get : int () {
    my $client = SPVM::Webkit::Client->new_opt([(object)
      default_headers => SPVM::Hash->newa([(object) Accept => "*/*" ])
    ]);

    my $response = $client->request("GET", "http://testserver.spvm.info", undef);

    unless ($response &&
        $response->{status} == 200 &&
        $response->{headers} &&
        strtoi((string)$response-> {headers}->get("content-length"), 10) == 5 &&
        $response->{content} eq "Test\n") {
      return 0;
    }

    return 1;
  }

  sub test_head : int () {
    my $client = SPVM::Webkit::Client->new_opt([(object)
      default_headers => SPVM::Hash->newa([(object) Accept => "*/*" ])
    ]);

    my $response = $client->request("HEAD", "http://testserver.spvm.info", undef);

    unless ($response &&
        $response->{status} == 200 &&
        $response->{headers} &&
        strtoi((string)$response->{headers}->get("content-length"), 10) == 5 &&
        $response->{content} eq "") {
      return 0;
    }

    return 1;
  }

  sub test_post : int () {
    my $client = SPVM::Webkit::Client->new_opt([(object)
      default_headers => SPVM::Hash->newa([(object) Accept => "*/*" ])
    ]);

    my $response = $client->request("POST", "http://testserver.spvm.info/echo", [(object)
      content => "post content",
      headers => SPVM::Hash->newa([(object)
        "content-length" => 12,
      ]),
    ]);

    unless ($response &&
        $response->{status} == 200 &&
        strtoi((string)$response->{headers}->get("content-length"), 10) == 27 &&
        $response->{content} eq "Echo server: 'post content'") {
      return 0;
    }

    return 1;
  }

  sub test_post_form : int () {
    my $client = SPVM::Webkit::Client->new_opt([(object)
      default_headers => SPVM::Hash->newa([(object) Accept => "*/*" ])
    ]);

    my $form = $client->www_form_urlencode([(object)
      param1 => "val1",
      param2 => 123,
    ]);
    my $response = $client->request("POST", "http://testserver.spvm.info/echo", [(object)
      content => $form,
      headers => SPVM::Hash->newa([(object)
        "content-length" => length $form,
      ]),
    ]);

    unless ($response &&
        $response->{status} == 200 &&
        strtoi((string)$response->{headers}->get("content-length"), 10) == 37 &&
        $response->{content} eq "Echo server: 'param1=val1&param2=123'") {
      return 0;
    }

    return 1;
  }

  sub test_post_form_syntax_sugar : int () {
    my $client = SPVM::Webkit::Client->new_opt([(object)
      default_headers => SPVM::Hash->newa([(object) Accept => "*/*" ])
    ]);

    my $response = $client->post_form("http://testserver.spvm.info/echo", [(object)
      key         => "value",
      "あいう abc" => "値 123",
    ]);

    unless ($response &&
        $response->{status} == 200 &&
        strtoi((string)$response->{headers}->get("content-length"), 10) == 74 &&
        $response->{content} eq "Echo server: '%E3%81%82%E3%81%84%E3%81%86%20abc=%E5%80%A4%20123&key=value'") {
      return 0;
    }

    return 1;
  }

  sub test_get_chunk_small : int () {
    my $client = SPVM::Webkit::Client->new_opt([(object)
      default_headers => SPVM::Hash->newa([(object) Accept => "*/*" ])
    ]);

    my $data = SPVM::StringBuffer->new;
    my $cb1 = [$data : SPVM::StringBuffer] sub : void ($self : self, $append : string, $target : object) {
      $data->push($append);
    };

    my $response = $client->request("GET", "http://testserver.spvm.info/chunk/text", [(object)
      data_callback => $cb1,
    ]);

    unless ($response &&
        $response->{status} == 200 &&
        (string)$response->{headers}->get("transfer-encoding") eq "chunked" &&
        $data->to_string eq "abcdefg\n12345\nあいう") {
      return 0;
    }

    return 1;
  }

  sub test_get_chunk_large : int () {
    my $client = SPVM::Webkit::Client->new_opt([(object)
      default_headers => SPVM::Hash->newa([(object) Accept => "*/*" ])
    ]);

    my $byte_data = [0];
    my $cb2 = [$byte_data : int []] sub : void ($self : self, $append : string, $target : object) {
      $byte_data->[0] += length $append;
    };
    my $response = $client->request("GET", "http://testserver.spvm.info/chunk/images", [(object)
      data_callback => $cb2,
    ]);

    unless ($response &&
        $response->{status} == 200 &&
        (string)$response->{headers}->get("transfer-encoding") eq "chunked" &&
        $byte_data->[0] == 3979989) {
      return 0;
    }

    return 1;
  }
}
