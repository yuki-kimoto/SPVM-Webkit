package TestCase::Lib::Webkit::JSON {
  use Webkit::JSON;
  use ObjectList;
  use Int;
  use Double;
  use Webkit::JSON::Bool;
  use Hash;
  use Sort (sortstr);
  use Util (contains);

  our $DEFAULT_JSON : Webkit::JSON;

  BEGIN {
    $DEFAULT_JSON = Webkit::JSON->new;
    $DEFAULT_JSON->set_canonical(1);
  }

  static method _equals : int ($lhs : object, $rhs : object) {
    if ($lhs == undef) {
      unless ($rhs == undef) {
        return 0;
      }
    }
    elsif ($lhs isa Hash) {
      unless ($rhs isa Hash) {
        return 0;
      }

      my $l_hash = (Hash)$lhs;
      my $r_hash = (Hash)$lhs;

      my $l_keys = $l_hash->keys;
      my $r_keys = $r_hash->keys;

      if (@$l_keys == 0) {
        unless (@$r_keys == 0) {
          return 0;
        }
      }
      else {
        sortstr($l_keys);
        sortstr($r_keys);

        for (my $key_index = 0; $key_index < @$l_keys; ++$key_index) {
          my $key = $l_keys->[$key_index];
          unless ($l_keys->[$key_index] eq $r_keys->[$key_index]) {
            return 0;
          }
          unless (_equals($l_hash->get($key), $r_hash->get($key))) {
            return 0;
          }
        }
      }
    }
    elsif ($lhs isa ObjectList) {
      unless ($rhs isa ObjectList) {
        return 0;
      }

      my $l_list = (ObjectList)$lhs;
      my $r_list = (ObjectList)$rhs;

      unless ($l_list->length == $r_list->length) {
        return 0;
      }

      my $length = $l_list->length;
      for (my $list_index = 0; $list_index < $length; ++$list_index) {
        unless (_equals($l_list->get($list_index), $r_list->get($list_index))) {
          return 0;
        }
      }
    }
    elsif ($lhs isa string) {
      unless ($rhs isa string) {
        return 0;
      }

      my $l_str = (string)$lhs;
      my $r_str = (string)$rhs;

      unless ($l_str eq $r_str) {
        return 0;
      }
    }
    elsif ($lhs isa Int) {
      unless ($rhs isa Int) {
        return 0;
      }

      my $l_int = (Int)$lhs;
      my $r_int = (Int)$rhs;

      unless ($l_int->val == $r_int->val) {
        return 0;
      }
    }
    elsif ($lhs isa Webkit::JSON::Bool) {
      unless ($rhs isa Webkit::JSON::Bool) {
        return 0;
      }

      my $l_bool = (Webkit::JSON::Bool)$lhs;
      my $r_bool = (Webkit::JSON::Bool)$rhs;

      unless ($l_bool->val == $r_bool->val) {
        return 0;
      }
    }
    elsif ($lhs isa Double) {
      unless ($rhs isa Double) {
        return 0;
      }

      my $l_dbl = (Double)$lhs;
      my $r_dbl = (Double)$rhs;

      unless ($l_dbl->val == $r_dbl->val) {
        return 0;
      }
    }
    else {
      die "Not implemented type is used in \$lhs";
    }

    return 1;
  }

  static method encode_flat_hash : int () {
    {
      my $input    = Hash->new;
      my $got      = $DEFAULT_JSON->encode($input);
      my $expected = "{}";
      unless ($got eq $expected) {
        return 0;
      }
    }
    {
      my $input    = Hash->newa([(object) "int" => 42 ]);
      my $got      = $DEFAULT_JSON->encode($input);
      my $expected = "{\"int\":42}";
      unless ($got eq $expected) {
        return 0;
      }
    }
    {
      my $input    = Hash->newa([(object) "string" => "vstr" ]);
      my $got      = $DEFAULT_JSON->encode($input);
      my $expected = "{\"string\":\"vstr\"}";
      unless ($got eq $expected) {
        return 0;
      }
    }
    {
      my $input    = Hash->newa([(object) "double" => 0.123 ]);
      my $got      = $DEFAULT_JSON->encode($input);
      my $expected = "{\"double\":0.123}";
      unless ($got eq $expected) {
        return 0;
      }
    }
    {
      my $input    = Hash->newa([(object) "bool_true" => Webkit::JSON::Bool->TRUE]);
      my $got      = $DEFAULT_JSON->encode($input);
      my $expected = "{\"bool_true\":true}";
      unless ($got eq $expected) {
        return 0;
      }
    }
    {
      my $input    = Hash->newa([(object) "bool_false" => Webkit::JSON::Bool->FALSE]);
      my $got      = $DEFAULT_JSON->encode($input);
      my $expected = "{\"bool_false\":false}";
      unless ($got eq $expected) {
        return 0;
      }
    }
    {
      my $input    = Hash->newa([(object)
        "bool"   => Webkit::JSON::Bool->FALSE,
        "double" => 0.1,
        "int"    => 1,
        "str"    => "hoge",
      ]);
      my $got      = $DEFAULT_JSON->encode($input);
      my $expected = "{\"bool\":false,\"double\":0.1,\"int\":1,\"str\":\"hoge\"}";
      unless ($got eq $expected) {
        return 0;
      }
    }
    return 1;
  }

  static method decode_flat_hash : int () {
    {
      my $input    = "{}";
      my $got      = $DEFAULT_JSON->decode($input);
      my $expected = Hash->new;
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    {
      my $input    = "{\"string\":\"vstr\"}";
      my $got      = $DEFAULT_JSON->decode($input);
      my $expected = Hash->newa([(object) "string" => "vstr" ]);
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    {
      my $input    = "{\"double\":0.123}";
      my $got      = $DEFAULT_JSON->decode($input);
      my $expected = Hash->newa([(object) "double" => 0.123 ]);
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    {
      my $input    = "{\"bool_true\":true}";
      my $got      = $DEFAULT_JSON->decode($input);
      my $expected = Hash->newa([(object) "bool_true" => Webkit::JSON::Bool->TRUE]);
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    {
      my $input    = "{\"bool_false\":false}";
      my $got      = $DEFAULT_JSON->decode($input);
      my $expected = Hash->newa([(object) "bool_false" => Webkit::JSON::Bool->FALSE]);
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    {
      my $input    = "{\"double\":0.1,\"bool\":false,\"int\":1,\"str\":\"hoge\"}";
      my $got      = $DEFAULT_JSON->decode($input);
      my $expected = Hash->newa([(object)
        "bool"   => Webkit::JSON::Bool->FALSE,
        "double" => 0.1,
        "str"    => "hoge",
      ]);
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    {
      my $input    = " { \"key\" \n\t: 123\t,\n\t\t\"list\" :\n[\t1\t,\r2\t,\t3\n]}\r\r";
      my $got      = $DEFAULT_JSON->decode($input);
      my $expected = Hash->newa([(object)
        "key"  => 123.0,
        "list" => ObjectList->newa([(object) 1.0, 2.0, 3.0])
      ]);
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    return 1;
  }

  static method encode_flat_list : int () {
    {
      my $input    = ObjectList->new;
      my $got      = $DEFAULT_JSON->encode($input);
      my $expected = "[]";
      unless ($got eq $expected) {
        return 0;
      }
    }
    {
      my $input    = ObjectList->newa([(object) 1, 2, 3]);
      my $got      = $DEFAULT_JSON->encode($input);
      my $expected = "[1,2,3]";
      unless ($got eq $expected) {
        return 0;
      }
    }
    {
      my $input    = ObjectList->newa([(object) "abc", "def"]);
      my $got      = $DEFAULT_JSON->encode($input);
      my $expected = "[\"abc\",\"def\"]";
      unless ($got eq $expected) {
        return 0;
      }
    }
    {
      my $input    = ObjectList->newa([(object) 0, 3.14, "abc", Webkit::JSON::Bool->TRUE]);
      my $got      = $DEFAULT_JSON->encode($input);
      my $expected = "[0,3.14,\"abc\",true]";
      unless ($got eq $expected) {
        return 0;
      }
    }
    return 1;
  }

  static method decode_flat_list : int () {
    {
      my $input    = "[]";
      my $got      = $DEFAULT_JSON->decode($input);
      my $expected = ObjectList->new;
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    {
      my $input    = "[3,2,1]";
      my $got      = $DEFAULT_JSON->decode($input);
      my $expected = ObjectList->newa([(object) 3.0, 2.0, 1.0]);
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    {
      my $input    = "[\"def\",\"abc\"]";
      my $got      = $DEFAULT_JSON->decode($input);
      my $expected = ObjectList->newa([(object) "def", "abc"]);
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    {
      my $input    = "[0,3.14,\"abc\",true]";
      my $got      = $DEFAULT_JSON->decode($input);
      my $expected = ObjectList->newa([(object) 0.0, 3.14, "abc", Webkit::JSON::Bool->TRUE]);
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    {
      my $input    = " [ 3.14\n, true \t , \"a\" ] ";
      my $got      = $DEFAULT_JSON->decode($input);
      my $expected = ObjectList->newa([(object) 3.14, Webkit::JSON::Bool->TRUE, "a"]);
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    return 1;
  }

  static method encode_int : int () {
    my $test_case_json = ["-1", "0", "1"];
    my $test_case_int  = [-1, 0, 1];
    for (my $i = 0; $i < @$test_case_json; ++$i) {
      my $input    = Int->new($test_case_int->[$i]);
      my $got      = $DEFAULT_JSON->encode($input);
      my $expected = $test_case_json->[$i];
      unless ($got eq $expected) {
        return 0;
      }
    }
    return 1;
  }

  static method encode_double : int () {
    my $test_case  = [
      0.123, -0.123, 3.14, -3.14, 123.987, -123.987,
      1.23456e+1, 1.23456e-1, 1.23456e+08, 1.23456e-08, 1.23456e+008, 1.23456e-008,
      1.23456e+018, 1.23456e-018, 9.9e-100, 9.9e+300, -1.23e+123
    ];
    for (my $i = 0; $i < @$test_case; ++$i) {
      my $input    = Double->new($test_case->[$i]);
      my $got      = $DEFAULT_JSON->encode($input);
      my $expected = "" . $test_case->[$i];
      unless ($got eq $expected) {
        return 0;
      }
    }
    return 1;
  }

  static method decode_double : int () {
    my $test_case  = [
      0.123, -0.123, 3.14, -3.14, 123.987, -123.987,
      1.23456e+1, 1.23456e-1, 1.23456e+08, 1.23456e-08, 1.23456e+008, 1.23456e-008,
      1.23456e+018, 1.23456e-018, 9.9e-100, 9.9e+300, -1.23e+123
    ];
    for (my $i = 0; $i < @$test_case; ++$i) {
      my $input    = "" . $test_case->[$i];
      my $got      = "" . ((Double)$DEFAULT_JSON->decode($input))->val;
      my $expected = "" . $test_case->[$i];
      unless ($got eq $expected) {
        return 0;
      }
    }
    {
      eval {
        $DEFAULT_JSON->decode("-");
      };
      unless ($@ && contains($@, "malformed number (no digit after '-')")) {
        $@ = undef;
        return 0;
      }
      $@ = undef;
    }
    {
      my $test_case = ["1e.", "1e+.", "1.."];
      for (my $i = 0; $i < @$test_case; ++$i) {
        my $input = $test_case->[$i];
        eval {
          $DEFAULT_JSON->decode($input);
        };
        unless ($@ && contains($@, "malformed number (improper position of '.')")) {
          $@ = undef;
          return 0;
        }
        $@ = undef;
      }
    }
    {
      my $test_case = ["1.e", "1e+e", "1ee"];
      for (my $i = 0; $i < @$test_case; ++$i) {
        my $input = $test_case->[$i];
        eval {
          $DEFAULT_JSON->decode($input);
        };
        unless ($@ && contains($@, "malformed number (improper position of 'e')")) {
          $@ = undef;
          return 0;
        }
        $@ = undef;
      }
    }
    {
      my $test_case = ["1.}"];
      for (my $i = 0; $i < @$test_case; ++$i) {
        my $input = $test_case->[$i];
        eval {
          $DEFAULT_JSON->decode($input);
        };
        unless ($@ && contains($@, "malformed number (no digit after '.')")) {
          $@ = undef;
          return 0;
        }
        $@ = undef;
      }
    }
    {
      my $test_case = ["1e}"];
      for (my $i = 0; $i < @$test_case; ++$i) {
        my $input = $test_case->[$i];
        eval {
          $DEFAULT_JSON->decode($input);
        };
        unless ($@ && contains($@, "malformed number (no digit after 'e')")) {
          $@ = undef;
          return 0;
        }
        $@ = undef;
      }
    }
    {
      my $test_case = ["1e+}", "1e-}"];
      for (my $i = 0; $i < @$test_case; ++$i) {
        my $input = $test_case->[$i];
        eval {
          $DEFAULT_JSON->decode($input);
        };
        unless ($@ && contains($@, "malformed number (no digit after exponential sign)")) {
          $@ = undef;
          return 0;
        }
        $@ = undef;
      }
    }
    return 1;
  }

  static method encode_bool : int () {
    {
      my $input = Webkit::JSON::Bool->TRUE;
      my $got = $DEFAULT_JSON->encode($input);
      my $expected = "true";
      unless ($got eq $expected) {
        return 0;
      }
    }
    {
      my $input = Webkit::JSON::Bool->FALSE;
      my $got = $DEFAULT_JSON->encode($input);
      my $expected = "false";
      unless ($got eq $expected) {
        return 0;
      }
    }
    return 1;
  }

  static method decode_bool : int () {
    {
      my $input = "true";
      my $got = $DEFAULT_JSON->decode($input);
      my $expected = Webkit::JSON::Bool->TRUE;
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    {
      my $input = "false";
      my $got = $DEFAULT_JSON->decode($input);
      my $expected = Webkit::JSON::Bool->FALSE;
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    return 1;
  }

  static method encode_string : int () {
    {
      my $input = "str";
      my $got = $DEFAULT_JSON->encode($input);
      my $expected = "\"str\"";
      unless ($got eq $expected) {
        return 0;
      }
    }
    # special characters
    # '"'
    {
      my $input = "\"";
      my $got = $DEFAULT_JSON->encode($input);
      my $expected = "\"\\\"\"";
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    # '\'
    {
      my $input = "\\";
      my $got = $DEFAULT_JSON->encode($input);
      my $expected = "\"\\\\\"";
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    # '\n'
    {
      my $input = "\n";
      my $got = $DEFAULT_JSON->encode($input);
      my $expected = "\"\\n\"";
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    # '\r'
    {
      my $input = "\r";
      my $got = $DEFAULT_JSON->encode($input);
      my $expected = "\"\\r\"";
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    # '\t'
    {
      my $input = "\t";
      my $got = $DEFAULT_JSON->encode($input);
      my $expected = "\"\\t\"";
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    return 1;
  }

  static method decode_string : int () {
    {
      my $input = "\"str\"";
      my $got = $DEFAULT_JSON->decode($input);
      my $expected = "str";
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    # special characters
    # '"'
    {
      my $input = "\"\\\"\"";
      my $got = $DEFAULT_JSON->decode($input);
      my $expected = "\"";
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    # '\'
    {
      my $input = "\"\\\\\"";
      my $got = $DEFAULT_JSON->decode($input);
      my $expected = "\\";
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    # '/'
    {
      my $input = "\"\\/\"";
      my $got = $DEFAULT_JSON->decode($input);
      my $expected = "/";
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    # '\b'
    {
      my $input = "\"\\b\"";
      my $got = $DEFAULT_JSON->decode($input);
      my $expected = "\b";
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    # '\f'
    {
      my $input = "\"\\f\"";
      my $got = $DEFAULT_JSON->decode($input);
      my $expected = "\f";
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    # '\n'
    {
      my $input = "\"\\n\"";
      my $got = $DEFAULT_JSON->decode($input);
      my $expected = "\n";
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    # '\r'
    {
      my $input = "\"\\r\"";
      my $got = $DEFAULT_JSON->decode($input);
      my $expected = "\r";
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    # '\t'
    {
      my $input = "\"\\t\"";
      my $got = $DEFAULT_JSON->decode($input);
      my $expected = "\t";
      unless (_equals($got, $expected)) {
        return 0;
      }
    }
    # control characters are not allowed
    {
      for (my $ch : byte = 0; $ch <= 31; ++$ch) {
        eval {
          $DEFAULT_JSON->decode("\"" . [ $ch ] . "\"");
        };
        unless ($@ && contains($@, "Control ASCII characters are not allowed in string")) {
          $@ = undef;
          return 0;
        }
        $@ = undef;
      }
      eval {
        $DEFAULT_JSON->decode("\"" . [ (byte)127 ] . "\"");
      };
      unless ($@ && contains($@, "Control ASCII characters are not allowed in string")) {
        $@ = undef;
        return 0;
      }
      $@ = undef;
    }
    return 1;
  }

  static method encode_nested_hash : int () {
    my $input = Hash->newa([(object)
      "A" => Hash->newa([(object)
        "B" => 1,
        "C" => Hash->newa([(object)
          "D" => 0.1,
          "E" => Webkit::JSON::Bool->TRUE,
          "F" => "str",
          "G" => ObjectList->newa([(object)
            "abc",
            123,
            Hash->newa([(object)
              "H" => "val",
            ]),
          ]),
        ])
      ]),
      "I" => "EOF",
    ]);
    my $got = $DEFAULT_JSON->encode($input);
    my $expected = "{\"A\":{\"B\":1,\"C\":{\"D\":0.1,\"E\":true,\"F\":\"str\",\"G\":[\"abc\",123,{\"H\":\"val\"}]}},\"I\":\"EOF\"}";
    unless ($got eq $expected) {
      return 0;
    }
    return 1;
  }

  static method decode_nested_hash : int () {
    my $input = "{\"A\":{\"B\":1,\"C\":{\"D\":0.1,\"E\":true,\"F\":\"str\",\"G\":[\"abc\",123,{\"H\":\"val\"}]}},\"I\":\"EOF\"}";
    my $got = $DEFAULT_JSON->decode($input);
    my $expected = Hash->newa([(object)
      "A" => Hash->newa([(object)
        "B" => 1.0,
        "C" => Hash->newa([(object)
          "D" => 0.1,
          "E" => Webkit::JSON::Bool->TRUE,
          "F" => "str",
          "G" => ObjectList->newa([(object)
            "abc",
            123.0,
            Hash->newa([(object)
              "H" => "val",
            ]),
          ]),
        ])
      ]),
      "I" => "EOF",
    ]);
    unless (_equals($got, $expected)) {
      return 0;
    }
    return 1;
  }

  static method encode_null : int () {
    unless ($DEFAULT_JSON->encode(undef) eq "null") {
      return 0;
    }
    return 1;
  }
  
  static method decode_null : int () {
    unless ($DEFAULT_JSON->decode("null") == undef) {
      return 0;
    }
    return 1;
  }
}
