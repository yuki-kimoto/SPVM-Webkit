class Webkit::Handle {
  use Webkit::Response;
  use IO::Socket;
  use StringBuffer;
  use Fn;
  use Array;

  has timeout : public double;
  has socket : public IO::Socket;
  has rbuf : StringBuffer;
  has max_header_lines : int;

  our $_BUFSIZE : rw int;

  INIT {
    $_BUFSIZE = 32768;
  }

  static method new_opt : Webkit::Handle ($args : object[]) {
    my $h = Hash->new($args);
    my $self = new Webkit::Handle;
    if (my $o = $h->get("timeout")) {
      $self->{timeout} = ((Double)$o)->value;
    }
    $self->{rbuf} = StringBuffer->new;
    if (my $o = $h->get("max_header_lines")) {
      $self->{max_header_lines} = ((Int)$o)->value;
    }
    else {
      $self->{max_header_lines} = 64;
    }
    return $self;
  }

  private static method _to_hex : string ($val : int) {
    my $res = ByteList->new(undef);
    while (1) {
      $res->push($Webkit::Client::_Hex->[$val % 16]);
      $val /= 16;
    }
    return (string)$res->to_array;
  }

  private static method _read_as : void ($target : string, $token : string, $pos : int*) {
    unless (Fn->index($target, $token, $$pos) == 0) {
      die "Malformed string. '$token' is expected: '$target'";
    }
    $$pos += length $token;
  }

  private static method _read_as_ws : void ($target : string, $pos : int*) {
    unless ($target->[$$pos] == ' ' || $target->[$$pos] == '\t') {
      die "Malformed string. No white spaces: '$target'";
    }
    my $len = length $target;
    for (; $$pos < $len &&
        $target->[$$pos] == ' ' ||
        $target->[$$pos] == '\t';
        ++$$pos) {}
  }

  private static method _capture : string ($target : string, $length : int, $pos : int*) {
    my $ret = "";
    eval {
      $ret = Fn->substr($target, $$pos, $length);
    };
    if ($@) {
      die "Malformed string, parse failed at $$pos. string: '$target'";
    }
    $$pos += $length;
    return $ret;
  }

  private static method _as_digits : int ($string : string) {
    my $length = length $string;
    my $ret = 0;
    for (my $i = 0; $i < $length; ++$i) {
      $ret *= 10;
      $ret += $string->[$i] - '0';
    }
    return $ret;
  }

  private static method _trim_left : string ($string : string) {
    my $length = length $string;
    for (my $i = 0; $i < $length; ++$i) {
      if ($string->[$i] != ' ') {
        return Fn->substr($string, $i, $length - $i);
      }
    }
    return "";
  }

  private static method _header_field : string[] ($line : string) {
    my $length = length $line;
    my $name = "";
    for (my $i = 0; $i < $length; ++$i) {
      my $c = $line->[$i];
      if ($c == ':') {
        my $value = Fn->substr($line, $i + 1, Fn->index($line, "\r\n", $i + 1) - $i - 1);
        $value = &_trim_left($value);
        return [$name, $value];
      }
      unless (('\x00' <= $c && $c <= '\x1F') || $c == '\x7F') { # control codes
        $name .= [$c];
      }
    }
    return undef;
  }
  
  private static method _has_chunked : int ($te : object) {
    if ($te isa string) {
      if ((string)$te eq "chunked") {
        return 1;
      }
    }
    elsif ($te isa StringList && ((StringList)$te)->grep("chunked")) {
      return 1;
    }
    return 0;
  }

  method connect : Webkit::Handle ($args : Hash) {
    unless ($args->exists("host")) {
      die "Missing argument 'host'.";
    }
    my $host = (string)($args->get("host"));
    unless ($args->exists("port")) {
      die "Missing argument 'port'.";
    }
    my $port = ((Int)($args->get("port")))->value;
    $self->{socket} = IO::Socket->new($host, $port);
    $self->{rbuf} = StringBuffer->new;
    return $self;
  }

  method write : int ($buf : StringBuffer) {
    my $len = $buf->length;
    my $off = 0;
    while (1) {
      my $data = Fn->substr($buf->value, $off, $len);
      my $write_length = $self->{socket}->write($data, $len);
      $len -= $write_length;
      $off += $write_length;
      unless ($len > 0) {
        last;
      }
    }
    
    return $off;
  }

  method write_header_lines : void (
      $headers : Hash, $prefix_data : string) {
    my $buf = StringBuffer->new;
    if ($prefix_data) {
      $buf->push($prefix_data);
    }
    my $control_fields = ["host", "cache-control", "expect", "max-forwards", "pragma", "range", "te"];
    my $seen = Hash->new({});
    for (my $i = 0; $i < @$control_fields; ++$i) {
      if (my $v = $headers->get($control_fields->[$i])) {
        $buf->push($control_fields->[$i] . ": " . (string)$v . "\r\n");
        $seen->set($control_fields->[$i], 1);
      }
    }
    my $ks = $headers->keys;
    for (my $i = 0; $i < @$ks; ++$i) {
      unless ($seen->get($ks->[$i])) {
        my $val_ = $headers->get($ks->[$i]);
        my $val : string;
        if ($val_ isa string) {
          $val = (string)$val_;
        }
        elsif ($val_ isa Int) {
          $val = "" . ((Int)$val_)->value;
        }
        else {
          die "Unexpected header value type. key: " . $ks->[$i];
        }
        $buf->push($ks->[$i] . ": $val\r\n");
      }
    }
    $buf->push("\r\n");
    $self->write($buf);
  }

  method write_request_header : void ($method : string,
      $path_query : string, $headers : Hash) {
    $self->write_header_lines($headers, "$method $path_query HTTP/1.1\r\n");
  }

  method write_content_body : void ($content_length : int, $content : string) {
    my $buffer = StringBuffer->new;
    $buffer->push($content);
    my $len = $self->write($buffer);
    unless ($len == $content_length) {
      die "Content-Length mismatch (got: $len expected: $content_length)";
    }
  }

  method write_chunked_body : void ($content : string) {
    my $len = length $content;
    my $buffer = StringBuffer->new;
    $buffer->push(&_to_hex($len) . "\r\n$content\r\n");
    $buffer->push("0\r\n");
    $self->write($buffer);
  }

  method write_body : void ($headers : Hash, $content : string) {
    if (my $content_length_ = $headers->get("content-length")) {
      my $content_length = ((Int)$content_length_)->value;
      $self->write_content_body($content_length, $content);
    }
    else {
      $self->write_chunked_body($content);
    }
  }

  method write_request : void ($method : string, $path_query : string,
      $headers : Hash, $content : string) {
    $self->write_request_header($method, $path_query, $headers);
    if ($content) {
      $self->write_body($headers, $content);
    }
  }

  private method _extract_line : string () {
    my $index = Fn->index_len($self->{rbuf}->value, "\n", 0, $self->{rbuf}->length);
    if ($index < 0) {
      return undef;
    }
    my $ret = Fn->substr($self->{rbuf}->value, 0, $index + 1);
    if ($self->{rbuf}->length == $index + 1) {
      $self->{rbuf} = StringBuffer->new;
    }
    else {
      my $new_buffer = StringBuffer->new;
      $new_buffer->push(Fn->substr($self->{rbuf}->value, $index + 1, $self->{rbuf}->length - $index - 1));
      $self->{rbuf} = $new_buffer;
    }
    return $ret;
  }

  method readline : string () {
    while (1) {
      if (my $line = $self->_extract_line) {
        return $line;
      }
      my $buf = new byte [$_BUFSIZE];
      my $r = $self->{socket}->read($buf);
      if ($r > 0) {
        $self->{rbuf}->push((string)Array->copy_range_byte($buf, 0, $r));
      }
      elsif ($r == 0) {
        die "Unexpected end of stream while looking for line";
      }
    }
    return $self->{rbuf}->to_string;
  }

  private method _read_header_lines : Hash (
      $headers : Hash) {
    my $lines = 0;
    unless ($headers) {
      $headers = Hash->new([]);
    }
    while (1) {
      if (++$lines >= $self->{max_header_lines}) {
        die "Header lines exceeds maximum number allowed of $self->{max_header_lines}";
      }
      my $line = $self->readline;
      if (my $header_field = &_header_field($line)) {
        my $field_name = Fn->lc($header_field->[0]);
        my $field_value = $header_field->[1];
        if (my $o = $headers->get($field_name)) {
          my $p : StringList;
          if ($o isa string) {
            $p = StringList->new([(string)$o]);
          }
          else {
            $p = (StringList)$o;
          }
          $p->push($field_value);
        }
        else {
          $headers->set($field_name, $field_value);
        }
      }
      elsif ($line eq "\r\n" || $line eq "\n") {
        last;
      }
      else {
        die "Malformed header line: '$line'";
      }
    }
    return $headers;
  }

  method read_response_header : Webkit::Response () {
    my $line = $self->readline;
    my $pos = 0;
    &_read_as($line, "HTTP/", \$pos);
    my $version = &_capture($line, 3, \$pos);
    unless ($version eq "1.0" || $version eq "1.1") {
      die "Unsupported HTTP protocol HTTP/$version";
    }
    &_read_as_ws($line, \$pos);
    my $status = &_capture($line, 3, \$pos);
    &_read_as_ws($line, \$pos);
    my $reason = Fn->substr($line, $pos, length($line) - $pos - 2);
    return Webkit::Response->new_opt([(object)
      protocol => "HTTP/$version",
      status   => &_as_digits($status),
      reason   => $reason,
      headers  => $self->_read_header_lines(undef),
    ]);
  }

  private method _read_hex_length : int () {
    my $line = $self->readline;
    if (length($line) <= 2) {
      die "Malformed chunk-size: '$line'";
    }
    my $length : int;
    eval {
      $length = Fn->to_int_with_base(Fn->substr($line, 0, length($line) - 2), 16);
    };
    if ($@) {
      die "Malformed chunk-size. $@";
    }
    else {
      return $length;
    }
  }

  private method _read : int ($len : int,
      $buf : StringBuffer, $allow_partial : int) {

    my $updated = 0;

    if (my $got = $self->{rbuf}->length) {
      $updated = 1;
      my $take = $len;
      if ($take > $got) {
        $take = $got;
      }
      $buf->push(Fn->substr($self->{rbuf}->value, 0, $take));
      if ($got > $take) {
        my $new_buffer = StringBuffer->new;
        $new_buffer->push(Fn->substr($self->{rbuf}->value, $take, $got - $take));
        $self->{rbuf} = $new_buffer;
      }
      else {
        $self->{rbuf} = StringBuffer->new;
      }
      $len -= $take;
    }

    while ($len > 0) {
      my $chunk = new byte [$len];
      my $read_len : int;
      eval {
        $read_len = $self->{socket}->read($chunk);
      };
      if ($@) {
        die "Could not read from socket: '$@'";
      }

      if ($read_len) {
        $updated = 1;
        $buf->push((string)Array->copy_range_byte($chunk, 0, $read_len));
        $len -= $read_len;
      }
      else {
        last;
      }
    }

    if ($len && !$allow_partial) {
      die "Unexpected end of stream";
    }

    return $updated;
  }

  private method _read_chunked_body : int (
      $data_cb : Webkit::DataHandler,
      $response : Webkit::Response) {
    while (1) {
      my $len = $self->_read_hex_length;
      if ($len > 0) {
        $self->_read_content_body($data_cb, $response, $len);
        unless ($self->readline eq "\r\n") {
          die "Malformed chunk: missing CRLF after chunk data";
        }
      }
      else {
        last;
      }
    }
    $self->_read_header_lines($response->{headers});
    return 1;
  }

  private method _read_content_body : int (
      $data_cb : Webkit::DataHandler,
      $response : Webkit::Response, $content_length : Int) {
    if (!$content_length) {
      if (my $o = $response->{headers}->get("content-length")) {
        $content_length = Fn->to_int((string)$o);
      }
    }
    if ($content_length) {
      my $len = $content_length->value;
      my $buf = StringBuffer->new;
      while ($len > 0) {
        my $read = $len;
        if ($len > $_BUFSIZE) {
          $read = $_BUFSIZE;
        }
        $self->_read($read, $buf, 0);
        $len -= $read;
      }
      $data_cb->($buf->to_string, $response);
      return $self->{rbuf}->length == 0;
    }
    else {
      my $buf = StringBuffer->new;
      while (1) {
        unless ($self->_read($_BUFSIZE, $buf, 1)) {
          last;
        }
      }
      $data_cb->($buf->to_string, $response);
      return 0;
    }
  }

  method read_body : int ($data_cb : Webkit::DataHandler,
      $response : Webkit::Response) {
    my $te = $response->{headers}->get("transfer-encoding");
    if ($te && &_has_chunked($te)) {
      return $self->_read_chunked_body($data_cb, $response);
    }
    else {
      return $self->_read_content_body($data_cb, $response, undef);
    }
  }
}
