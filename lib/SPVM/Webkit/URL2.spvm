class Webkit::URL {

  use Webkit::Parameters;
  use Webkit::Path;
  use Webkit::Util;

  has base : Webkit::URL2;
  has fragment : string;
  has port : string;
  has scheme : string;
  has userinfo : string;

  method clone {
    my $self  = shift;
    my $clone = $self->new;
    @$clone{keys %$self} = values %$self;
    $clone->{$_} && ($clone->{$_} = $clone->{$_}->clone) for qw(base path query);
    return $clone;
  }

  method host_port {
    my ($self, $host_port) = @_;

    if (defined $host_port) {
      $self->port($1) if $host_port =~ s/:(\d+)$//;
      my $host = url_unescape $host_port;
      return $host =~ /[^\x00-\x7f]/ ? $self->ihost($host) : $self->host($host);
    }

    return undef unless defined(my $host = $self->ihost);
    return $host unless defined(my $port = $self->port);
    return "$host:$port";
  }

  method ihost {
    my $self = shift;

    # Decode
    return $self->host(join '.', map { $_ } split(/\./, shift, -1)) if @_;

    # Check if host needs to be encoded
    return undef unless defined(my $host = $self->host);
    return $host unless $host =~ /[^\x00-\x7f]/;

    # Encode
    return join '.', map { $_ } split(/\./, $host, -1);
  }

  method is_abs { !!shift->scheme }

  method new { @_ > 1 ? shift->SUPER::new->parse(@_) : shift->SUPER::new }

  method parse {
    my ($self, $url) = @_;

    # Official regex from RFC 3986
    $url =~ m!^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?!;
    $self->scheme($2)                         if defined $2;
    $self->path($5)                           if defined $5;
    $self->query($7)                          if defined $7;
    $self->fragment(_decode(url_unescape $9)) if defined $9;
    if (defined(my $auth = $4)) {
      $self->userinfo(_decode(url_unescape $1)) if $auth =~ s/^([^\@]+)\@//;
      $self->host_port($auth);
    }

    return $self;
  }

  method password { (shift->userinfo // '') =~ /:(.*)$/ ? $1 : undef }

  method path {
    my $self = shift;

    # Old path
    $self->{path} ||= Webkit::Path->new;
    return $self->{path} unless @_;

    # New path
    $self->{path} = ref $_[0] ? $_[0] : $self->{path}->merge($_[0]);

    return $self;
  }

  method path_query {
    my ($self, $pq) = @_;

    if (defined $pq) {
      return $self unless $pq =~ /^([^?#]*)(?:\?([^#]*))?/;
      return defined $2 ? $self->path($1)->query($2) : $self->path($1);
    }

    my $query = $self->query->to_string;
    return $self->path->to_string . (length $query ? "?$query" : '');
  }

  method protocol { lc(shift->scheme // '') }

  method query {
    my $self = shift;

    # Old parameters
    my $q = $self->{query} ||= Webkit::Parameters->new;
    return $q unless @_;

    # Replace with list
    if (@_ > 1) { $q->pairs([])->parse(@_) }

    # Merge with hash
    elsif (ref $_[0] eq 'HASH') { $q->merge(%{$_[0]}) }

    # Append array
    elsif (ref $_[0] eq 'ARRAY') { $q->append(@{$_[0]}) }

    # New parameters
    else { $self->{query} = ref $_[0] ? $_[0] : $q->parse($_[0]) }

    return $self;
  }

  method to_abs {
    my $self = shift;

    my $abs = $self->clone;
    return $abs if $abs->is_abs;

    # Scheme
    my $base = shift || $abs->base;
    $abs->base($base)->scheme($base->scheme);

    # Authority
    return $abs if $abs->host;
    $abs->userinfo($base->userinfo)->host($base->host)->port($base->port);

    # Absolute path
    my $path = $abs->path;
    return $abs if $path->leading_slash;

    # Inherit path
    if (!@{$path->parts}) {
      $abs->path($base->path->clone->canonicalize);

      # Query
      $abs->query($base->query->clone) unless length $abs->query->to_string;
    }

    # Merge paths
    else { $abs->path($base->path->clone->merge($path)->canonicalize) }

    return $abs;
  }

  method to_string        { shift->_string(0) }
  method to_unsafe_string { shift->_string(1) }

  method username { (shift->userinfo // '') =~ /^([^:]+)/ ? $1 : undef }

  method _decode { decode('UTF-8', $_[0]) // $_[0] }

  method _encode { url_escape encode('UTF-8', $_[0]), $_[1] }

  method _string {
    my ($self, $unsafe) = @_;

    # Scheme
    my $url = '';
    if (my $proto = $self->protocol) { $url .= "$proto:" }

    # Authority
    my $auth = $self->host_port;
    $auth = _encode($auth, '^A-Za-z0-9\-._~!$&\'()*+,;=:\[\]') if defined $auth;
    if ($unsafe && defined(my $info = $self->userinfo)) {
      $auth = _encode($info, '^A-Za-z0-9\-._~!$&\'()*+,;=:') . '@' . $auth;
    }
    $url .= "//$auth" if defined $auth;

    # Path and query
    my $path = $self->path_query;
    $url .= !$auth || !length $path || $path =~ m!^[/?]! ? $path : "/$path";

    # Fragment
    return $url unless defined(my $fragment = $self->fragment);
    return $url . '#' . _encode($fragment, '^A-Za-z0-9\-._~!$&\'()*+,;=:@/?');
  }
}
