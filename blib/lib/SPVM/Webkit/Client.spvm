class Webkit::Client {
  use Webkit::Handle;
  use Webkit::URL;
  use StringList;
  use ByteList;
  use List;
  use Fn;
  
  has default_headers : public Hash;
  has timeout : public double;
  has max_size : public int;

  our $_Hex : public ro string;

  INIT {
    $_Hex = "0123456789ABCDEF";
  }

  static method new : Webkit::Client () {
    my $self = new Webkit::Client;
    $self->{default_headers} = Hash->new;
    $self->{timeout} = 60;
    return $self;
  }

  static method new_opt : Webkit::Client ($args : object[]) {

    my $h = Hash->newa($args);
    my $self = new Webkit::Client;
    my $headers = (Hash)$h->get("default_headers");
    $self->{default_headers} = Hash->new;
    my $keys = $headers->keys;
    for (my $i = 0; $i < @$keys; ++$i) {
      $self->{default_headers}->set(Fn->lc($keys->[$i]), $headers->get($keys->[$i]));
    }
    $self->{timeout} = 60;
    return $self;
  }

  method post_form : Webkit::Response ($url : string, $data : object[]) {
    my $form = $self->www_form_urlencode($data);
    return $self->request("POST", $url, [(object)
      content => $form,
      headers => Hash->newa([(object)
        "content-type"   => "application/x-www-form-urlencoded",
        "content-length" => length $form,
      ]),
    ]);
  }

  method www_form_urlencode : string ($data : object[]) {
    unless (@$data % 2 == 0) {
      die "form data reference must have an even number of terms";
    }
    my $params = List->newa($data);
    my $terms = StringList->new;
    for (my $i = 0; $i < $params->length; $i += 2) {
      my $key = (string)$params->get($i);
      my $val = $params->get($i + 1);
      if ($val isa StringList) {
        my $multivals = ((StringList)$val)->to_array;
        for (my $k = 0; $k < @$multivals; ++$k) {
          $params->push($key);
          $params->push($multivals->[$k]);
        }
      }
      else {
        my $string_val : string;
        if ($val isa string) {
          $string_val = (string)$val;
        }
        elsif ($val isa Int) {
          $string_val = "" . ((Int)$val)->val;
        }
        else {
          die "Unexpected parameter value type. key: $key";
        }
        $terms->push(Fn->join("=", [$self->_url_escape($key), $self->_url_escape($string_val)]));
      }
    }
    my $terms_array = $terms->to_array;
    Fn->sort_string($terms_array);
    return Fn->join("&", $terms_array);
  }

  private method _url_escape : string ($s : string) {
    my $res = ByteList->new;
    my $length = length $s;
    for (my $i = 0; $i < $length; ++$i) {
      if (('A' <= $s->[$i] && $s->[$i] <= 'Z') ||
          ('a' <= $s->[$i] && $s->[$i] <= 'z') ||
          ('0' <= $s->[$i] && $s->[$i] <= '9') ||
          $s->[$i] == '-' || $s->[$i] == '.' ||
          $s->[$i] == '_' || $s->[$i] == '~') {
        $res->push($s->[$i]);
      }
      else {
        $res->push('%');
        $res->push($_Hex->[($s->[$i] & 0xFF) >>> 4]);
        $res->push($_Hex->[$s->[$i] & 0x0F]);
      }
    }
    return (string)$res->to_array;
  }

  private method _prepare_headers : Hash ($host : string, $port : int, $args_headers : Hash) {
    my $headers = $self->{default_headers}->copy;
    if ($args_headers) {
      my $args_each = $args_headers->each;
      for (my $i = 0; $i < @$args_each; ++$i) {
        $headers->set(Fn->lc((string)$args_each->[$i]->[0]), $args_each->[$i]->[1]);
      }
    }
    my $host_port = $host;
    if ($port != 80) {
      $host_port .= ":$port";
    }
    $headers->set("host", $host_port);
    return $headers;
  }

  private method _prepare_content : string ($args : Hash) {
    if ($args) {
      if (my $content = $args->get("content")) {
        return (string)$content;
      }
    }
    return undef;
  }

  private method _open_handle : Webkit::Handle ($host : string, $port : int) {
    my $handle = Webkit::Handle->new_opt([(object)
      timeout => $self->{timeout},
    ]);
    return $handle->connect(Hash->newa([(object)
      host => $host,
      port => $port,
    ]));
  }

  private method _prepare_data_cb : Webkit::DataHandler (
      $response : Webkit::Response, $args : Hash) {
    my $data_cb : Webkit::DataHandler;
    if ($args) {
      if (my $o = $args->get("data_callback")) {
        $data_cb = (Webkit::DataHandler)$o;
      }
    }
    $response->{content} = "";

    if (!$data_cb || $response->{status} / 100 != 2) {
      if (my $max_size = $self->{max_size}) {
        $data_cb = [$max_size : int] method : void ($append : string,
            $target : object) {
          my $response = (Webkit::Response)$target;
          $response->{content} .= $append;
          if (length $response->{content} > $max_size) {
            die "Size of response body exceeds the maximum allowed of $max_size";
          }
        };
      }
      else {
        $data_cb = method : void ($append : string, $target : object) {
          ((Webkit::Response)$target)->{content} .= $append;
        };
      }
    }
    return $data_cb;
  }

  method request : Webkit::Response ($method : string,
      $url : string, $args : object[]) {
    my $u = Webkit::URL->parse($url);
    $u->force_root_path_slashed;
    my $host = $u->{host};
    my $port = $u->{port};
    my $path_query = $u->{path};
    if ($u->{params} && $u->{params}->to_string ne "") {
      $path_query .= "?" . $u->{params}->to_string;
    }
    my $hash_args : Hash;
    my $args_headers : Hash;
    if ($args) {
      $hash_args = Hash->newa($args);
      if (my $o = $hash_args->get("headers")) {
        $args_headers = (Hash)$o;
      }
    }
    my $headers = $self->_prepare_headers($host, $port, $args_headers);
    my $content = $self->_prepare_content($hash_args);
    my $handle = $self->_open_handle($host, $port);
    $handle->write_request($method, $path_query, $headers, $content);

    my $response = $handle->read_response_header;

    my $known_message_length : int;
    if ($method eq "HEAD" || ($response->{status} == 204 || $response->{status} == 304)) {
      $known_message_length = 1;
    }
    else {
      my $data_cb = $self->_prepare_data_cb($response, $hash_args);
      $known_message_length = $handle->read_body($data_cb, $response);
    }

    $response->{success} = $response->{status} / 100 == 2;
    $response->{url} = $url;

    return $response;
  }
}

