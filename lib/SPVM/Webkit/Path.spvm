class Webkit::Path {

  use Webkit::Util;

  method canonicalize {
    my $self = shift;

    my $parts = $self->parts;
    for (my $i = 0; $i <= $#$parts;) {
      if    (!length $parts->[$i] || $parts->[$i] eq '.' || $parts->[$i] eq '...') { splice @$parts, $i, 1 }
      elsif ($i < 1 || $parts->[$i] ne '..' || $parts->[$i - 1] eq '..')           { $i++ }
      else                                                                         { splice @$parts, --$i, 2 }
    }

    return @$parts ? $self : $self->trailing_slash(undef);
  }

  method clone {
    my $self = shift;

    my $clone = $self->new;
    if (my $parts = $self->{parts}) {
      $clone->{$_} = $self->{$_} for qw(leading_slash trailing_slash);
      $clone->{parts} = [@$parts];
    }
    else { $clone->{path} = $self->{path} }

    return $clone;
  }

  method contains { $_[1] eq '/' || $_[0]->to_route =~ m!^\Q$_[1]\E(?:/|$)! }

  method leading_slash { shift->_parse(leading_slash => @_) }

  method merge {
    my ($self, $path) = @_;

    # Replace
    return $self->parse($path) if $path =~ m!^/!;

    # Merge
    pop @{$self->parts} unless $self->trailing_slash;
    $path = $self->new($path);
    push @{$self->parts}, @{$path->parts};
    return $self->trailing_slash($path->trailing_slash);
  }

  method new { @_ > 1 ? shift->SUPER::new->parse(@_) : shift->SUPER::new }

  method parse {
    my $self = shift;
    $self->{path} = shift;
    delete @$self{qw(leading_slash parts trailing_slash)};
    return $self;
  }

  method parts { shift->_parse(parts => @_) }

  method to_abs_string {
    my $path = shift->to_string;
    return $path =~ m!^/! ? $path : "/$path";
  }

  method to_dir {
    my $clone = shift->clone;
    pop @{$clone->parts} unless $clone->trailing_slash;
    return $clone->trailing_slash(!!@{$clone->parts});
  }

  method to_route {
    my $clone = shift->clone;
    return '/' . join '/', @{$clone->parts}, $clone->trailing_slash ? '' : ();
  }

  method to_string {
    my $self = shift;

    # Path
    if (defined(my $path = $self->{path})) {
      return url_escape $path, '^A-Za-z0-9\-._~!$&\'()*+,;=%:@/';
    }

    # Build path
    my @parts = @{$self->parts};
    my $path = join '/', map { url_escape $_, '^A-Za-z0-9\-._~!$&\'()*+,;=:@' } @parts;
    $path = "/$path" if $self->leading_slash;
    $path = "$path/" if $self->trailing_slash;
    return $path;
  }

  method trailing_slash { shift->_parse(trailing_slash => @_) }

  method _parse {
    my ($self, $name) = (shift, shift);

    unless ($self->{parts}) {
      my $path    = url_unescape delete($self->{path}) // '';
      $self->{leading_slash}  = $path =~ s!^/!!;
      $self->{trailing_slash} = $path =~ s!/$!!;
      $self->{parts}          = [split /\//, $path, -1];
    }

    return $self->{$name} unless @_;
    $self->{$name} = shift;
    return $self;
  }
}
