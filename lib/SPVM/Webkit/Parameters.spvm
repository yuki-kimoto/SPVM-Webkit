class Webkit::Parameters {

  use Webkit::Util;

  has charset : string; # UTF-8

  method append {
    my $self = shift;

    my $old = $self->pairs;
    my @new = @_ == 1 ? @{shift->pairs} : @_;
    while (my ($name, $value) = splice @new, 0, 2) {

      # Multiple values
      if (ref $value eq 'ARRAY') { push @$old, $name => $_ // '' for @$value }

      # Single value
      elsif (defined $value) { push @$old, $name => $value }
    }

    return $self;
  }

  method clone {
    my $self = shift;

    my $clone = $self->new;
    if   (exists $self->{charset}) { $clone->{charset} = $self->{charset} }
    if   (defined $self->{string}) { $clone->{string}  = $self->{string} }
    else                           { $clone->{pairs}   = [@{$self->pairs}] }

    return $clone;
  }

  method every_param {
    my ($self, $name) = @_;

    my @values;
    my $pairs = $self->pairs;
    for (my $i = 0; $i < @$pairs; $i += 2) {
      push @values, $pairs->[$i + 1] if $pairs->[$i] eq $name;
    }

    return \@values;
  }

  method merge {
    my $self = shift;

    my $merge = @_ == 1 ? shift->to_hash : {@_};
    for my $name (sort keys %$merge) {
      my $value = $merge->{$name};
      defined $value ? $self->param($name => $value) : $self->remove($name);
    }

    return $self;
  }

  method names { [sort keys %{shift->to_hash}] }

  method new { @_ > 1 ? shift->SUPER::new->parse(@_) : shift->SUPER::new }

  method pairs {
    my $self = shift;

    # Replace parameters
    if (@_) {
      $self->{pairs} = shift;
      delete $self->{string};
      return $self;
    }

    # Parse string
    if (defined(my $str = delete $self->{string})) {
      my $pairs = $self->{pairs} = [];
      return $pairs unless length $str;

      my $charset = $self->charset;
      for my $pair (split /&/, $str) {
        next unless $pair =~ /^([^=]+)(?:=(.*))?$/;
        my ($name, $value) = ($1, $2 // '');

        # Replace "+" with whitespace, unescape and decode
        s/\+/ /g for $name, $value;
        $name  = url_unescape $name;
        $name  = decode($charset, $name) // $name if $charset;
        $value = url_unescape $value;
        $value = decode($charset, $value) // $value if $charset;

        push @$pairs, $name, $value;
      }
    }

    return $self->{pairs} //= [];
  }

  method param {
    my ($self, $name) = (shift, shift);
    return $self->every_param($name)->[-1] unless @_;
    $self->remove($name);
    return $self->append($name => ref $_[0] eq 'ARRAY' ? $_[0] : [@_]);
  }

  method parse {
    my $self = shift;

    # Pairs
    return $self->append(@_) if @_ > 1;

    # String
    $self->{string} = shift;
    return $self;
  }

  method remove {
    my ($self, $name) = @_;
    my $pairs = $self->pairs;
    my $i     = 0;
    $pairs->[$i] eq $name ? splice @$pairs, $i, 2 : ($i += 2) while $i < @$pairs;
    return $self;
  }

  method to_hash {
    my $self = shift;

    my %hash;
    my $pairs = $self->pairs;
    for (my $i = 0; $i < @$pairs; $i += 2) {
      my ($name, $value) = @{$pairs}[$i, $i + 1];

      # Array
      if (exists $hash{$name}) {
        $hash{$name} = [$hash{$name}] if ref $hash{$name} ne 'ARRAY';
        push @{$hash{$name}}, $value;
      }

      # String
      else { $hash{$name} = $value }
    }

    return \%hash;
  }

  method to_string {
    my $self = shift;

    # String (RFC 3986)
    my $charset = $self->charset;
    if (defined(my $str = $self->{string})) {
      $str = encode $charset, $str if $charset;
      return url_escape $str, '^A-Za-z0-9\-._~%!$&\'()*+,;=:@/?';
    }

    # Build pairs (HTML Living Standard)
    my $pairs = $self->pairs;
    return '' unless @$pairs;
    my @pairs;
    for (my $i = 0; $i < @$pairs; $i += 2) {
      my ($name, $value) = @{$pairs}[$i, $i + 1];

      # Escape and replace whitespace with "+"
      $name  = encode $charset,   $name if $charset;
      $name  = url_escape $name,  '^*\-.0-9A-Z_a-z';
      $value = encode $charset,   $value if $charset;
      $value = url_escape $value, '^*\-.0-9A-Z_a-z';
      s/\%20/\+/g for $name, $value;

      push @pairs, "$name=$value";
    }

    return join '&', @pairs;
  }
}
