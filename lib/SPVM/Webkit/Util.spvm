class Webkit::Util {

  # Punycode bootstring parameters
  enum {
    PC_BASE         = 36,
    PC_TMIN         = 1,
    PC_TMAX         = 26,
    PC_SKEW         = 38,
    PC_DAMP         = 700,
    PC_INITIAL_BIAS = 72,
    PC_INITIAL_N    = 128
  }

  # Direct translation of RFC 3492
  static method punycode_decode {
    my $input = shift;
    use integer;

    my ($n, $i, $bias, @output) = (PC_INITIAL_N, 0, PC_INITIAL_BIAS);

    # Consume all code points before the last delimiter
    push @output, split(//, $1) if $input =~ s/(.*)\x2d//s;

    while (length $input) {
      my ($oldi, $w) = ($i, 1);

      # Base to infinity in steps of base
      for (my $k = PC_BASE; 1; $k += PC_BASE) {
        my $digit = ord substr $input, 0, 1, '';
        $digit = $digit < 0x40 ? $digit + (26 - 0x30) : ($digit & 0x1f) - 1;
        $i += $digit * $w;
        my $t = $k - $bias;
        $t = $t < PC_TMIN ? PC_TMIN : $t > PC_TMAX ? PC_TMAX : $t;
        last if $digit < $t;
        $w *= PC_BASE - $t;
      }

      $bias = _adapt($i - $oldi, @output + 1, $oldi == 0);
      $n += $i / (@output + 1);
      $i = $i % (@output + 1);
      splice @output, $i++, 0, chr $n;
    }

    return join '', @output;
  }

  # Direct translation of RFC 3492
  static method punycode_encode {
    my $output = shift;
    use integer;

    my ($n, $delta, $bias) = (PC_INITIAL_N, 0, PC_INITIAL_BIAS);

    # Extract basic code points
    my @input = map {ord} split //, $output;
    $output =~ s/[^\x00-\x7f]+//gs;
    my $h = my $basic = length $output;
    $output .= "\x2d" if $basic > 0;

    for my $m (sort grep { $_ >= PC_INITIAL_N } @input) {
      next if $m < $n;
      $delta += ($m - $n) * ($h + 1);
      $n = $m;

      for my $c (@input) {

        if    ($c < $n) { $delta++ }
        elsif ($c == $n) {
          my $q = $delta;

          # Base to infinity in steps of base
          for (my $k = PC_BASE; 1; $k += PC_BASE) {
            my $t = $k - $bias;
            $t = $t < PC_TMIN ? PC_TMIN : $t > PC_TMAX ? PC_TMAX : $t;
            last if $q < $t;
            my $o = $t + (($q - $t) % (PC_BASE - $t));
            $output .= chr $o + ($o < 26 ? 0x61 : 0x30 - 26);
            $q = ($q - $t) / (PC_BASE - $t);
          }

          $output .= chr $q + ($q < 26 ? 0x61 : 0x30 - 26);
          $bias  = _adapt($delta, $h + 1, $h == $basic);
          $delta = 0;
          $h++;
        }
      }

      $delta++;
      $n++;
    }

    return $output;
  }

  static method url_escape {
    my ($str, $pattern) = @_;

    if ($pattern) {
      unless (exists $PATTERN{$pattern}) {
        (my $quoted = $pattern) =~ s!([/\$\[])!\\$1!g;
        $PATTERN{$pattern} = eval "static method { \$_[0] =~ s/([$quoted])/sprintf '%%%02X', ord \$1/ge }" or croak $@;
      }
      $PATTERN{$pattern}->($str);
    }
    else { $str =~ s/([^A-Za-z0-9\-._~])/sprintf '%%%02X', ord $1/ge }

    return $str;
  }

  static method url_unescape {
    my $str = shift;
    $str =~ s/%([0-9a-fA-F]{2})/chr hex $1/ge;
    return $str;
  }
}
