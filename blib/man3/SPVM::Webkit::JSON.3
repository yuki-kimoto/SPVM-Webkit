.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SPVM::Webkit::JSON 3"
.TH SPVM::Webkit::JSON 3 "2020-01-06" "perl v5.20.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SPVM::Webkit::JSON \- JSON serializing/deserializing
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 1
\&  use SPVM::Webkit::JSON;
\&
\&  # new
\&  my $json = SPVM::Webkit::JSON\->new;
\&
\&  # decode
\&  $json\->decode($json_text);
\&
\&  # set the canonical flag on
\&  $json\->set_canonical(1);
\&
\&  # encode
\&  my $encoded_json = $json\->encode($spvm_data);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SPVM::Webkit::JSON converts \s-1SPVM\s0 data structures to \s-1JSON\s0 and vice versa.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  sub new : SPVM::Webkit::JSON ()
.Ve
.PP
Create new SPVM::Webkit::JSON object that can be used to de/encode \s-1JSON\s0 strings.
.SH "INSTANCE METHODS"
.IX Header "INSTANCE METHODS"
.SS "encode"
.IX Subsection "encode"
.Vb 1
\&  sub encode : string ($self : self, $object : object)
.Ve
.PP
Converts the given \s-1SPVM\s0 data structure (undef or a object of numeric,
string, SPVM::Webkit::JSON::Bool, SPVM::Hash or SPVM::ObjectList)
to its \s-1JSON\s0 representation.
.SS "decode"
.IX Subsection "decode"
.Vb 1
\&  sub decode : object ($self : self, $json : string)
.Ve
.PP
The opposite of encode: expects a \s-1JSON\s0 text and tries to parse it, returning
the resulting object. Dies on error. Numbers in a \s-1JSON\s0 text are converted
to SPVM::Double.
.SS "set_canonical"
.IX Subsection "set_canonical"
.Vb 1
\&  sub set_canonical : void ($self : self, $enable : byte)
.Ve
.PP
If \f(CW$enable\fR is true, then the encode method will output \s-1JSON\s0 objects by
sorting their keys. This is adding a comparatively high overhead.
.SS "canonical"
.IX Subsection "canonical"
.Vb 1
\&  sub canonical : byte ($self : self)
.Ve
.PP
Get the canonical flag.
